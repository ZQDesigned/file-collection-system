# 移除 version 属性

services:
  # 前端服务
  web:
    build: 
      context: ../web
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - gateway-service
    networks:
      - frontend
      - backend
      
  # 服务发现
  discovery-service:
    image: discovery-service:latest
    ports:
      - "8761:8761"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
      
  # 网关服务
  gateway-service:
    build: ../services/gateway-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - JWT_SECRET=*V)zNZJG2gVyxA_4$Q_C7^)qrSdDDk0tW
    depends_on:
      discovery-service:
        condition: service_healthy
    networks:
      - frontend
      - backend
      
  # 认证服务
  auth-service:
    image: auth-service:latest
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/filecollect
      - JWT_SECRET=*V)zNZJG2gVyxA_4$Q_C7^)qrSdDDk0tW
    depends_on:
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
      
  # 文件服务
  file-service:
    build: ../services/file-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/filecollect
      - MINIO_ENDPOINT=http://minio:9000
      - JWT_SECRET=*V)zNZJG2gVyxA_4$Q_C7^)qrSdDDk0tW
    depends_on:
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - backend
      
  # 任务服务
  task-service:
    build: ../services/task-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/filecollect
      - SPRING_RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=*V)zNZJG2gVyxA_4$Q_C7^)qrSdDDk0tW
    depends_on:
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      
  # 通知服务
  notification-service:
    build: ../services/notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/filecollect
      - SPRING_RABBITMQ_HOST=rabbitmq
      - JWT_SECRET=*V)zNZJG2gVyxA_4$Q_C7^)qrSdDDk0tW
    depends_on:
      discovery-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
      
  # 数据库
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=filecollect
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # 对象存储
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      
  # 消息队列
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - backend
      
  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - backend

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  frontend:
  backend:

volumes:
  postgres_data:
  minio_data:
  prometheus_data:
  grafana_data: